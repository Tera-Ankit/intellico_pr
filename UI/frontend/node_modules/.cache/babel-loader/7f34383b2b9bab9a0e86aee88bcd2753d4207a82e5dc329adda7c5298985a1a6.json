{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AmalJojo\\\\Documents\\\\intellico\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./App.css\"; // Importing the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State to store folder path, message, scripts, and selected script\n  const [folderPath, setFolderPath] = useState(\"\");\n  const [message, setMessage] = useState(\"\"); // Success/Error messages\n  const [isFolderSelected, setIsFolderSelected] = useState(false); // Track if folder is selected\n  const [scripts, setScripts] = useState([]); // List of scripts in the folder\n  const [selectedScript, setSelectedScript] = useState(\"\"); // Selected script to run\n\n  // Handle manual folder path input\n  const handleFolderChange = event => {\n    setFolderPath(event.target.value);\n    setIsFolderSelected(false); // Reset folder selection state when user types\n  };\n\n  // Handle folder selection via file input\n  const handleFolderSelect = event => {\n    const selectedFolder = event.target.files[0];\n    if (selectedFolder) {\n      const folderName = selectedFolder.webkitRelativePath.split('/')[0];\n      setFolderPath(folderName); // Update folder path to the folder name\n      setIsFolderSelected(true); // Indicate that a folder is selected\n    }\n  };\n\n  // Handle folder submission to get the list of Python scripts\n  const handleFolderSubmit = async () => {\n    if (!folderPath) {\n      setMessage(\"Please select or enter a folder path.\");\n      return;\n    }\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/upload/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          folder_path: folderPath\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        if (data.message && typeof data.message === \"string\") {\n          setMessage(data.message);\n        } else {\n          setMessage(\"Scripts fetched successfully.\");\n        }\n        setScripts(data.scripts || []); // Ensure scripts is an array\n        console.log(\"Fetched Scripts:\", data.scripts);\n      } else {\n        setMessage(data.detail && typeof data.detail === \"string\" ? data.detail : \"Error fetching scripts.\");\n        console.error(\"Error response:\", data);\n      }\n    } catch (error) {\n      setMessage(\"An error occurred: \" + error.message);\n      console.error(\"Fetch error:\", error);\n    }\n  };\n\n  // Handle script execution submission\n  const handleScriptSubmit = async () => {\n    if (!selectedScript) {\n      setMessage(\"Please select a script to run.\");\n      return;\n    }\n    try {\n      // Send the script name and folder path to the FastAPI backend\n      const response = await fetch(\"http://127.0.0.1:8000/run_script/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          script_name: selectedScript,\n          folder_path: folderPath\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Success: Show script output\n        setMessage(data.message);\n        console.log(\"Script Output:\", data.output);\n      } else {\n        // Error response\n        setMessage(data.error || \"Error running script.\");\n      }\n    } catch (error) {\n      // Handle network or other errors\n      setMessage(\"An error occurred: \" + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Intellico\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Choose one of the following methods to provide the folder path:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"folder-path\",\n        children: \"Enter Folder Path:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"folder-path\",\n        value: folderPath,\n        onChange: handleFolderChange,\n        placeholder: \"Enter the folder path here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `folder-select-label ${isFolderSelected ? 'inactive' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: `folder-icon ${isFolderSelected ? 'inactive-icon' : ''}`,\n          children: \"\\uD83D\\uDCC1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `folder-text ${isFolderSelected ? 'inactive-text' : ''}`,\n          children: \"Or Select Folder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"folder-select\",\n        webkitdirectory: \"true\",\n        onChange: handleFolderSelect,\n        style: {\n          display: \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => document.getElementById(\"folder-select\").click(),\n        className: \"select-button\",\n        disabled: isFolderSelected,\n        children: \"Select Folder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), isFolderSelected && folderPath && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-preview\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Selected Folder:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 14\n        }, this), \" \", folderPath]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-button\",\n      onClick: handleFolderSubmit,\n      children: \"Fetch Scripts from Folder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), scripts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Script to Run:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedScript,\n        onChange: e => setSelectedScript(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a script\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), scripts.map((script, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: script,\n          children: script\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-button\",\n      onClick: handleScriptSubmit,\n      children: \"Run Selected Script\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"BzqO+8pu54xecKmb37qkdrlqLc8=\");\n_c = App;\nexport default App;\n\n// import React, { useState } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   // State to store folder path and message\n//   const [folderPath, setFolderPath] = useState(\"\");\n//   const [message, setMessage] = useState(\"\"); // Success/Error messages\n//   const [isFolderSelected, setIsFolderSelected] = useState(false); // Track if folder is selected\n\n//   // Handle manual folder path input\n//   const handleFolderChange = (event) => {\n//     setFolderPath(event.target.value);\n//     setIsFolderSelected(false); // Reset folder selection state when user types\n//   };\n\n//   // Handle folder selection via file input\n//   const handleFolderSelect = (event) => {\n//     const selectedFolder = event.target.files[0];\n//     if (selectedFolder) {\n//       // Extract folder name from the path (for multiple files, you'd want a more robust solution)\n//       const folderName = selectedFolder.webkitRelativePath.split('/')[0];\n//       setFolderPath(folderName); // Update folder path to the folder name\n//       setIsFolderSelected(true); // Indicate that a folder is selected\n//     }\n//   };\n\n//   // Handle form submission\n//   const handleSubmit = async () => {\n//     if (!folderPath) {\n//       setMessage(\"Please select or enter a folder path.\");\n//       return;\n//     }\n\n//     try {\n//       // Send the folder path to the FastAPI backend\n//       const response = await fetch(\"http://127.0.0.1:8000/run-script/\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ folder_path: folderPath }), // Send folder path as JSON\n//       });\n\n//       const data = await response.json();\n//       if (response.ok) {\n//         // Success response\n//         setMessage(data.message);\n//         console.log(\"Script Output:\", data.output);\n//       } else {\n//         // Error response\n//         setMessage(data.detail || \"Error running script\");\n//       }\n//     } catch (error) {\n//       // Handle network or other errors\n//       setMessage(\"An error occurred: \" + error.message);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Intellico</h1>\n\n//       {/* Instructions */}\n//       <p>Choose one of the following methods to provide the folder path:</p>\n\n//       {/* Manual Folder Path Input */}\n//       <div className=\"folder-input\">\n//         <label htmlFor=\"folder-path\">Enter Folder Path:</label>\n//         <input\n//           type=\"text\"\n//           id=\"folder-path\"\n//           value={folderPath}\n//           onChange={handleFolderChange}\n//           placeholder=\"Enter the folder path here\"\n//         />\n//       </div>\n\n//       {/* Folder Selection via File Input */}\n//       <div className=\"folder-input\">\n//         <div className={`folder-select-label ${isFolderSelected ? 'inactive' : ''}`}>\n//           <i className={`folder-icon ${isFolderSelected ? 'inactive-icon' : ''}`}>\n//             &#128193;\n//           </i>\n//           <span className={`folder-text ${isFolderSelected ? 'inactive-text' : ''}`}>\n//             Or Select Folder\n//           </span>\n//         </div>\n//         <input\n//           type=\"file\"\n//           id=\"folder-select\"\n//           webkitdirectory=\"true\"\n//           onChange={handleFolderSelect}\n//           style={{ display: \"none\" }}\n//         />\n//         <button\n//           onClick={() => document.getElementById(\"folder-select\").click()}\n//           className=\"select-button\"\n//           disabled={isFolderSelected}\n//         >\n//           Select Folder\n//         </button>\n//       </div>\n\n//       {/* Display selected folder */}\n//       {isFolderSelected && folderPath && (\n//         <div className=\"folder-preview\">\n//           <p><strong>Selected Folder:</strong> {folderPath}</p>\n//         </div>\n//       )}\n\n//       {/* Submit Button */}\n//       <button className=\"submit-button\" onClick={handleSubmit}>\n//         Submit Folder Path\n//       </button>\n\n//       {/* Message Area */}\n//       {message && <p className=\"message\">{message}</p>}\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","folderPath","setFolderPath","message","setMessage","isFolderSelected","setIsFolderSelected","scripts","setScripts","selectedScript","setSelectedScript","handleFolderChange","event","target","value","handleFolderSelect","selectedFolder","files","folderName","webkitRelativePath","split","handleFolderSubmit","response","fetch","method","headers","body","JSON","stringify","folder_path","data","json","ok","console","log","detail","error","handleScriptSubmit","script_name","output","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","placeholder","webkitdirectory","style","display","onClick","document","getElementById","click","disabled","length","e","map","script","index","_c","$RefreshReg$"],"sources":["C:/Users/AmalJojo/Documents/intellico/my-app/src/App.js"],"sourcesContent":["\nimport React, { useState } from \"react\";\nimport \"./App.css\"; // Importing the CSS file\n\nfunction App() {\n  // State to store folder path, message, scripts, and selected script\n  const [folderPath, setFolderPath] = useState(\"\");\n  const [message, setMessage] = useState(\"\"); // Success/Error messages\n  const [isFolderSelected, setIsFolderSelected] = useState(false); // Track if folder is selected\n  const [scripts, setScripts] = useState([]); // List of scripts in the folder\n  const [selectedScript, setSelectedScript] = useState(\"\"); // Selected script to run\n\n  // Handle manual folder path input\n  const handleFolderChange = (event) => {\n    setFolderPath(event.target.value);\n    setIsFolderSelected(false); // Reset folder selection state when user types\n  };\n\n  // Handle folder selection via file input\n  const handleFolderSelect = (event) => {\n    const selectedFolder = event.target.files[0];\n    if (selectedFolder) {\n      const folderName = selectedFolder.webkitRelativePath.split('/')[0];\n      setFolderPath(folderName); // Update folder path to the folder name\n      setIsFolderSelected(true); // Indicate that a folder is selected\n    }\n  };\n\n  // Handle folder submission to get the list of Python scripts\n  const handleFolderSubmit = async () => {\n    if (!folderPath) {\n      setMessage(\"Please select or enter a folder path.\");\n      return;\n    }\n  \n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/upload/\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ folder_path: folderPath }),\n      });\n  \n      const data = await response.json();\n      if (response.ok) {\n        if (data.message && typeof data.message === \"string\") {\n          setMessage(data.message);\n        } else {\n          setMessage(\"Scripts fetched successfully.\");\n        }\n        setScripts(data.scripts || []); // Ensure scripts is an array\n        console.log(\"Fetched Scripts:\", data.scripts);\n      } else {\n        setMessage(data.detail && typeof data.detail === \"string\" ? data.detail : \"Error fetching scripts.\");\n        console.error(\"Error response:\", data);\n      }\n    } catch (error) {\n      setMessage(\"An error occurred: \" + error.message);\n      console.error(\"Fetch error:\", error);\n    }\n  };\n  \n  \n\n  // Handle script execution submission\n  const handleScriptSubmit = async () => {\n    if (!selectedScript) {\n      setMessage(\"Please select a script to run.\");\n      return;\n    }\n\n    try {\n      // Send the script name and folder path to the FastAPI backend\n      const response = await fetch(\"http://127.0.0.1:8000/run_script/\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ script_name: selectedScript, folder_path: folderPath }),\n      });\n\n      const data = await response.json();\n      if (response.ok) {\n        // Success: Show script output\n        setMessage(data.message);\n        console.log(\"Script Output:\", data.output);\n      } else {\n        // Error response\n        setMessage(data.error || \"Error running script.\");\n      }\n    } catch (error) {\n      // Handle network or other errors\n      setMessage(\"An error occurred: \" + error.message);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Intellico</h1>\n\n      {/* Instructions */}\n      <p>Choose one of the following methods to provide the folder path:</p>\n\n      {/* Manual Folder Path Input */}\n      <div className=\"folder-input\">\n        <label htmlFor=\"folder-path\">Enter Folder Path:</label>\n        <input\n          type=\"text\"\n          id=\"folder-path\"\n          value={folderPath}\n          onChange={handleFolderChange}\n          placeholder=\"Enter the folder path here\"\n        />\n      </div>\n\n      {/* Folder Selection via File Input */}\n      <div className=\"folder-input\">\n        <div className={`folder-select-label ${isFolderSelected ? 'inactive' : ''}`}>\n          <i className={`folder-icon ${isFolderSelected ? 'inactive-icon' : ''}`}>\n            &#128193;\n          </i>\n          <span className={`folder-text ${isFolderSelected ? 'inactive-text' : ''}`}>\n            Or Select Folder\n          </span>\n        </div>\n        <input\n          type=\"file\"\n          id=\"folder-select\"\n          webkitdirectory=\"true\"\n          onChange={handleFolderSelect}\n          style={{ display: \"none\" }}\n        />\n        <button\n          onClick={() => document.getElementById(\"folder-select\").click()}\n          className=\"select-button\"\n          disabled={isFolderSelected}\n        >\n          Select Folder\n        </button>\n      </div>\n\n      {/* Display selected folder */}\n      {isFolderSelected && folderPath && (\n        <div className=\"folder-preview\">\n          <p><strong>Selected Folder:</strong> {folderPath}</p>\n        </div>\n      )}\n\n      {/* Button to submit folder and get Python scripts */}\n      <button className=\"submit-button\" onClick={handleFolderSubmit}>\n        Fetch Scripts from Folder\n      </button>\n\n      {/* Display list of scripts */}\n      {scripts.length > 0 && (\n        <div>\n          <label>Select Script to Run:</label>\n          <select\n            value={selectedScript}\n            onChange={(e) => setSelectedScript(e.target.value)}\n          >\n            <option value=\"\">Select a script</option>\n            {scripts.map((script, index) => (\n              <option key={index} value={script}>\n                {script}\n              </option>\n            ))}\n          </select>\n        </div>\n      )}\n\n      {/* Button to run the selected script */}\n      <button className=\"submit-button\" onClick={handleScriptSubmit}>\n        Run Selected Script\n      </button>\n\n      {/* Message Area */}\n      {message && <p className=\"message\">{message}</p>}\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   // State to store folder path and message\n//   const [folderPath, setFolderPath] = useState(\"\");\n//   const [message, setMessage] = useState(\"\"); // Success/Error messages\n//   const [isFolderSelected, setIsFolderSelected] = useState(false); // Track if folder is selected\n\n//   // Handle manual folder path input\n//   const handleFolderChange = (event) => {\n//     setFolderPath(event.target.value);\n//     setIsFolderSelected(false); // Reset folder selection state when user types\n//   };\n\n//   // Handle folder selection via file input\n//   const handleFolderSelect = (event) => {\n//     const selectedFolder = event.target.files[0];\n//     if (selectedFolder) {\n//       // Extract folder name from the path (for multiple files, you'd want a more robust solution)\n//       const folderName = selectedFolder.webkitRelativePath.split('/')[0];\n//       setFolderPath(folderName); // Update folder path to the folder name\n//       setIsFolderSelected(true); // Indicate that a folder is selected\n//     }\n//   };\n  \n\n//   // Handle form submission\n//   const handleSubmit = async () => {\n//     if (!folderPath) {\n//       setMessage(\"Please select or enter a folder path.\");\n//       return;\n//     }\n  \n//     try {\n//       // Send the folder path to the FastAPI backend\n//       const response = await fetch(\"http://127.0.0.1:8000/run-script/\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ folder_path: folderPath }), // Send folder path as JSON\n//       });\n  \n//       const data = await response.json();\n//       if (response.ok) {\n//         // Success response\n//         setMessage(data.message);\n//         console.log(\"Script Output:\", data.output);\n//       } else {\n//         // Error response\n//         setMessage(data.detail || \"Error running script\");\n//       }\n//     } catch (error) {\n//       // Handle network or other errors\n//       setMessage(\"An error occurred: \" + error.message);\n//     }\n//   };\n  \n\n//   return (\n//     <div className=\"App\">\n//       <h1>Intellico</h1>\n\n//       {/* Instructions */}\n//       <p>Choose one of the following methods to provide the folder path:</p>\n\n//       {/* Manual Folder Path Input */}\n//       <div className=\"folder-input\">\n//         <label htmlFor=\"folder-path\">Enter Folder Path:</label>\n//         <input\n//           type=\"text\"\n//           id=\"folder-path\"\n//           value={folderPath}\n//           onChange={handleFolderChange}\n//           placeholder=\"Enter the folder path here\"\n//         />\n//       </div>\n\n//       {/* Folder Selection via File Input */}\n//       <div className=\"folder-input\">\n//         <div className={`folder-select-label ${isFolderSelected ? 'inactive' : ''}`}>\n//           <i className={`folder-icon ${isFolderSelected ? 'inactive-icon' : ''}`}>\n//             &#128193;\n//           </i>\n//           <span className={`folder-text ${isFolderSelected ? 'inactive-text' : ''}`}>\n//             Or Select Folder\n//           </span>\n//         </div>\n//         <input\n//           type=\"file\"\n//           id=\"folder-select\"\n//           webkitdirectory=\"true\"\n//           onChange={handleFolderSelect}\n//           style={{ display: \"none\" }}\n//         />\n//         <button\n//           onClick={() => document.getElementById(\"folder-select\").click()}\n//           className=\"select-button\"\n//           disabled={isFolderSelected}\n//         >\n//           Select Folder\n//         </button>\n//       </div>\n\n\n\n//       {/* Display selected folder */}\n//       {isFolderSelected && folderPath && (\n//         <div className=\"folder-preview\">\n//           <p><strong>Selected Folder:</strong> {folderPath}</p>\n//         </div>\n//       )}\n\n//       {/* Submit Button */}\n//       <button className=\"submit-button\" onClick={handleSubmit}>\n//         Submit Folder Path\n//       </button>\n\n//       {/* Message Area */}\n//       {message && <p className=\"message\">{message}</p>}\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}