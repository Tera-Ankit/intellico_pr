{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AmalJojo\\\\Documents\\\\intellico\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [folderPath, setFolderPath] = useState(\"\"); // Store the folder path\n  const [message, setMessage] = useState(\"\"); // Display messages to the user\n\n  // Handle changes in the text input for folder path\n  const handleFolderChange = event => {\n    setFolderPath(event.target.value); // Update the folder path state\n  };\n\n  // Handle manual folder selection\n  const handleFolderSelect = event => {\n    const files = event.target.files;\n    if (files.length > 0) {\n      // Get the full path of the first file and extract the folder path\n      const fullPath = files[0].path || files[0].webkitRelativePath;\n      const folderPath = fullPath.substring(0, fullPath.lastIndexOf(\"/\"));\n      setFolderPath(folderPath); // Set the full folder path\n    }\n  };\n\n  // Handle submission of the folder path\n  const handleSubmit = () => {\n    if (!folderPath) {\n      setMessage(\"Please enter or select a folder path.\"); // Display error if folder path is empty\n      return;\n    }\n    setMessage(`Folder path submitted: ${folderPath}`); // Display the folder path\n    demo(folderPath); // Pass the folder path to the demo function\n  };\n\n  // Demo function to print the folder path\n  const demo = path => {\n    console.log(\"Folder path passed to demo function:\", path); // Print the folder path\n    alert(`Folder path: ${path}`); // Show an alert with the folder path (optional)\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Folder Path Submission\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"folder-path\",\n        children: \"Enter Folder Path:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"folder-path\",\n        value: folderPath,\n        onChange: handleFolderChange,\n        placeholder: \"Enter the folder path here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"folder-select\",\n        children: \"Or Select Folder:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"folder-select\",\n        webkitdirectory: \"true\",\n        onChange: handleFolderSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-button\",\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"VaI64oIN8/NAgwRaYewVIa8RRx0=\");\n_c = App;\nexport default App;\n\n// import React, { useState } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [folderPath, setFolderPath] = useState(\"\");\n//   const [message, setMessage] = useState(\"\"); // Success/Error messages\n//   const [isFolderSelected, setIsFolderSelected] = useState(false); // Track if folder is selected\n//   const [scripts, setScripts] = useState([]); // List of scripts in the folder\n//   const [selectedScript, setSelectedScript] = useState(\"\"); // Selected script to run\n\n//   const handleFolderChange = (event) => {\n//     setFolderPath(event.target.value);\n//     setIsFolderSelected(false); // Reset folder selection state when user types\n//   };\n\n//   const handleFolderSelect = (event) => {\n//     const selectedFolder = event.target.files[0];\n//     if (selectedFolder) {\n//       const folderName = selectedFolder.webkitRelativePath.split('/')[0];\n//       setFolderPath(folderName); // Update folder path to the folder name\n//       setIsFolderSelected(true); // Indicate that a folder is selected\n//     }\n//   };\n\n//   const handleFolderSubmit = async () => {\n//     if (!folderPath) {\n//       setMessage(\"Please select or enter a folder path.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:8000/upload/\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ folder_path: folderPath }), // Ensure folderPath is passed correctly\n//       });\n\n//       const data = await response.json();\n//       if (response.ok) {\n//         setMessage(data.message || \"Scripts fetched successfully.\");\n//         setScripts(data.scripts || []); // Ensure scripts is an array\n//       } else {\n//         setMessage(data.detail || \"Error fetching scripts.\");\n//         console.error(\"Error response:\", data);\n//       }\n//     } catch (error) {\n//       setMessage(\"An error occurred: \" + error.message);\n//       console.error(\"Fetch error:\", error);\n//     }\n//   };\n\n//   const handleScriptSubmit = async () => {\n//     if (!selectedScript) {\n//       setMessage(\"Please select a script to run.\");\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:8000/run_script/\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ script_name: selectedScript, folder_path: folderPath }), // Send both script_name and folder_path\n//       });\n\n//       const data = await response.json();\n//       if (response.ok) {\n//         setMessage(data.message || \"Script ran successfully.\");\n//         console.log(\"Script Output:\", data.output);\n//       } else {\n//         setMessage(data.error || \"Error running script.\");\n//       }\n//     } catch (error) {\n//       setMessage(\"An error occurred: \" + error.message);\n//     }\n//   };\n\n//   // Message rendering\n//   <p className=\"message\">\n//     {typeof message === \"string\" ? message : JSON.stringify(message)}\n//   </p>\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Intellico</h1>\n\n//       <p>Choose one of the following methods to provide the folder path:</p>\n\n//       <div className=\"folder-input\">\n//         <label htmlFor=\"folder-path\">Enter Folder Path:</label>\n//         <input\n//           type=\"text\"\n//           id=\"folder-path\"\n//           value={folderPath}\n//           onChange={handleFolderChange}\n//           placeholder=\"Enter the folder path here\"\n//         />\n//       </div>\n\n//       <div className=\"folder-input\">\n//         <div className={`folder-select-label ${isFolderSelected ? 'inactive' : ''}`}>\n//           <i className={`folder-icon ${isFolderSelected ? 'inactive-icon' : ''}`}>\n//             &#128193;\n//           </i>\n//           <span className={`folder-text ${isFolderSelected ? 'inactive-text' : ''}`}>\n//             Or Select Folder\n//           </span>\n//         </div>\n//         <input\n//           type=\"file\"\n//           id=\"folder-select\"\n//           webkitdirectory=\"true\"\n//           onChange={handleFolderSelect}\n//           style={{ display: \"none\" }}\n//         />\n//         <button\n//           onClick={() => document.getElementById(\"folder-select\").click()}\n//           className=\"select-button\"\n//           disabled={isFolderSelected}\n//         >\n//           Select Folder\n//         </button>\n//       </div>\n\n//       {isFolderSelected && folderPath && (\n//         <div className=\"folder-preview\">\n//           <p><strong>Selected Folder:</strong> {folderPath}</p>\n//         </div>\n//       )}\n\n//       <button className=\"submit-button\" onClick={handleFolderSubmit}>\n//         Fetch Scripts from Folder\n//       </button>\n\n//       {scripts.length > 0 && (\n//         <div>\n//           <label>Select Script to Run:</label>\n//           <select\n//             value={selectedScript}\n//             onChange={(e) => setSelectedScript(e.target.value)}\n//           >\n//             <option value=\"\">Select a script</option>\n//             {scripts.map((script, index) => (\n//               <option key={index} value={script}>\n//                 {script}\n//               </option>\n//             ))}\n//           </select>\n//         </div>\n//       )}\n\n//       <button className=\"submit-button\" onClick={handleScriptSubmit}>\n//         Run Selected Script\n//       </button>\n\n//       {message && <p className=\"message\">{message}</p>}\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","folderPath","setFolderPath","message","setMessage","handleFolderChange","event","target","value","handleFolderSelect","files","length","fullPath","path","webkitRelativePath","substring","lastIndexOf","handleSubmit","demo","console","log","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","placeholder","webkitdirectory","onClick","_c","$RefreshReg$"],"sources":["C:/Users/AmalJojo/Documents/intellico/my-app/src/App.js"],"sourcesContent":["\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [folderPath, setFolderPath] = useState(\"\"); // Store the folder path\n  const [message, setMessage] = useState(\"\"); // Display messages to the user\n\n  // Handle changes in the text input for folder path\n  const handleFolderChange = (event) => {\n    setFolderPath(event.target.value); // Update the folder path state\n  };\n\n  // Handle manual folder selection\n  const handleFolderSelect = (event) => {\n    const files = event.target.files;\n    if (files.length > 0) {\n      // Get the full path of the first file and extract the folder path\n      const fullPath = files[0].path || files[0].webkitRelativePath;\n      const folderPath = fullPath.substring(0, fullPath.lastIndexOf(\"/\"));\n      setFolderPath(folderPath); // Set the full folder path\n    }\n  };\n\n  // Handle submission of the folder path\n  const handleSubmit = () => {\n    if (!folderPath) {\n      setMessage(\"Please enter or select a folder path.\"); // Display error if folder path is empty\n      return;\n    }\n\n    setMessage(`Folder path submitted: ${folderPath}`); // Display the folder path\n    demo(folderPath); // Pass the folder path to the demo function\n  };\n\n  // Demo function to print the folder path\n  const demo = (path) => {\n    console.log(\"Folder path passed to demo function:\", path); // Print the folder path\n    alert(`Folder path: ${path}`); // Show an alert with the folder path (optional)\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Folder Path Submission</h1>\n\n      <div className=\"folder-input\">\n        <label htmlFor=\"folder-path\">Enter Folder Path:</label>\n        <input\n          type=\"text\"\n          id=\"folder-path\"\n          value={folderPath}\n          onChange={handleFolderChange}\n          placeholder=\"Enter the folder path here\"\n        />\n      </div>\n\n      <div className=\"folder-input\">\n        <label htmlFor=\"folder-select\">Or Select Folder:</label>\n        <input\n          type=\"file\"\n          id=\"folder-select\"\n          webkitdirectory=\"true\"\n          onChange={handleFolderSelect}\n        />\n      </div>\n\n      <button className=\"submit-button\" onClick={handleSubmit}>\n        Submit \n      </button>\n\n      {message && <p className=\"message\">{message}</p>}\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n//   const [folderPath, setFolderPath] = useState(\"\");\n//   const [message, setMessage] = useState(\"\"); // Success/Error messages\n//   const [isFolderSelected, setIsFolderSelected] = useState(false); // Track if folder is selected\n//   const [scripts, setScripts] = useState([]); // List of scripts in the folder\n//   const [selectedScript, setSelectedScript] = useState(\"\"); // Selected script to run\n\n//   const handleFolderChange = (event) => {\n//     setFolderPath(event.target.value);\n//     setIsFolderSelected(false); // Reset folder selection state when user types\n//   };\n\n//   const handleFolderSelect = (event) => {\n//     const selectedFolder = event.target.files[0];\n//     if (selectedFolder) {\n//       const folderName = selectedFolder.webkitRelativePath.split('/')[0];\n//       setFolderPath(folderName); // Update folder path to the folder name\n//       setIsFolderSelected(true); // Indicate that a folder is selected\n//     }\n//   };\n\n//   const handleFolderSubmit = async () => {\n//     if (!folderPath) {\n//       setMessage(\"Please select or enter a folder path.\");\n//       return;\n//     }\n  \n//     try {\n//       const response = await fetch(\"http://127.0.0.1:8000/upload/\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ folder_path: folderPath }), // Ensure folderPath is passed correctly\n//       });\n  \n//       const data = await response.json();\n//       if (response.ok) {\n//         setMessage(data.message || \"Scripts fetched successfully.\");\n//         setScripts(data.scripts || []); // Ensure scripts is an array\n//       } else {\n//         setMessage(data.detail || \"Error fetching scripts.\");\n//         console.error(\"Error response:\", data);\n//       }\n//     } catch (error) {\n//       setMessage(\"An error occurred: \" + error.message);\n//       console.error(\"Fetch error:\", error);\n//     }\n//   };\n  \n//   const handleScriptSubmit = async () => {\n//     if (!selectedScript) {\n//       setMessage(\"Please select a script to run.\");\n//       return;\n//     }\n  \n//     try {\n//       const response = await fetch(\"http://127.0.0.1:8000/run_script/\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ script_name: selectedScript, folder_path: folderPath }), // Send both script_name and folder_path\n//       });\n  \n//       const data = await response.json();\n//       if (response.ok) {\n//         setMessage(data.message || \"Script ran successfully.\");\n//         console.log(\"Script Output:\", data.output);\n//       } else {\n//         setMessage(data.error || \"Error running script.\");\n//       }\n//     } catch (error) {\n//       setMessage(\"An error occurred: \" + error.message);\n//     }\n//   };\n  \n//   // Message rendering\n//   <p className=\"message\">\n//     {typeof message === \"string\" ? message : JSON.stringify(message)}\n//   </p>\n  \n//   return (\n//     <div className=\"App\">\n//       <h1>Intellico</h1>\n\n//       <p>Choose one of the following methods to provide the folder path:</p>\n\n//       <div className=\"folder-input\">\n//         <label htmlFor=\"folder-path\">Enter Folder Path:</label>\n//         <input\n//           type=\"text\"\n//           id=\"folder-path\"\n//           value={folderPath}\n//           onChange={handleFolderChange}\n//           placeholder=\"Enter the folder path here\"\n//         />\n//       </div>\n\n//       <div className=\"folder-input\">\n//         <div className={`folder-select-label ${isFolderSelected ? 'inactive' : ''}`}>\n//           <i className={`folder-icon ${isFolderSelected ? 'inactive-icon' : ''}`}>\n//             &#128193;\n//           </i>\n//           <span className={`folder-text ${isFolderSelected ? 'inactive-text' : ''}`}>\n//             Or Select Folder\n//           </span>\n//         </div>\n//         <input\n//           type=\"file\"\n//           id=\"folder-select\"\n//           webkitdirectory=\"true\"\n//           onChange={handleFolderSelect}\n//           style={{ display: \"none\" }}\n//         />\n//         <button\n//           onClick={() => document.getElementById(\"folder-select\").click()}\n//           className=\"select-button\"\n//           disabled={isFolderSelected}\n//         >\n//           Select Folder\n//         </button>\n//       </div>\n\n//       {isFolderSelected && folderPath && (\n//         <div className=\"folder-preview\">\n//           <p><strong>Selected Folder:</strong> {folderPath}</p>\n//         </div>\n//       )}\n\n//       <button className=\"submit-button\" onClick={handleFolderSubmit}>\n//         Fetch Scripts from Folder\n//       </button>\n\n//       {scripts.length > 0 && (\n//         <div>\n//           <label>Select Script to Run:</label>\n//           <select\n//             value={selectedScript}\n//             onChange={(e) => setSelectedScript(e.target.value)}\n//           >\n//             <option value=\"\">Select a script</option>\n//             {scripts.map((script, index) => (\n//               <option key={index} value={script}>\n//                 {script}\n//               </option>\n//             ))}\n//           </select>\n//         </div>\n//       )}\n\n//       <button className=\"submit-button\" onClick={handleScriptSubmit}>\n//         Run Selected Script\n//       </button>\n\n//       {message && <p className=\"message\">{message}</p>}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}